
This is a file with a bunch of random pieces of ideas for
achievements, and/or improvements to the mechanism.  It is a real
mess, but hey, it keeps me from forgetting things.

;; http://www.reddit.com/r/emacs/comments/ook6a/does_something_like_this_exist_for_emacs/

;; use view-external-packages as a list of useful packages



;;{{{ keybindings

(defachievement "Evil Genius"
  "Use `evil-mode'.")

(defachievement ""
  "Use `wordstar-mode'.")
crisp-mode

(defachievement "Vi Convert"
  "Use `evil-mode', `viper-mode' or `'."
  viper vi vip
  )

(defachievement "Emacs Purist"
  "You've never used `evil-mode', `viper-mode' or `'.")

[remap ffap-read-only-other-frame]
keyolution.el

;;}}}
;;{{{ org

(defachievement "Busy Bee"
  "You have more than 100 TODO items in your agenda")

(defachievement ""
  "You have used org tables")

(defachievement ""
  "You have inline code in org-files")

(defachievement ""
  "You have exported an org file.")

org-replace-region-by-latex

;;}}}
;;{{{ Lisp

(defachievement ""
  "You have submitted a bug report.")

(defachievement "Autoload Master"
  "")

(defachievement ""
  "You have use M-:")

(defachievement ""
  "You have use C-x C-e")

(defachievement ""
  "You have use C-x e")
elint
checkdoc
edebug
profile
format-spec
cl package
command-switch-alist
define-derived-mode
benchmark-run
hack-let
debug-on-entry
debug-on-error
debug-on-quit
eval-last-sexp twice to get hex numbers
ert
disassemble

;;}}}
;;{{{ Modes

(defachievement ""
  ;; descriptions like this could be autogenerated
  "You use cperl-mode."
  :function cperl-mode)
sh-script-mode

(defachievement ""
  "You use nxml-mode.")

(defachievement ""
  "You use ido-mode.")

(defachievement ""
  "You use ibuffer.")

(defachievement ""
  "You use AUCTeX.")

(defachievement ""
  "You use Emacs for IM, IRC, or chat.")

(defachievement ""
  "You use Emacs for reading email or news.")

(defachievement ""
  "You use Emacs for surfing the web")

(defachievement ""
  "You like line numbers")

(defachievement ""
  "You have compiled C, C++, .")

(defachievement ""
  "You have used calc")

(defachievement ""
  "You use midnight mode.")

(defachievement ""
  "You use rectangles.")

view-mode

;; programming
which-func-mode

;;}}}
;;{{{ Variables

(defachievement ""
  ;; descriptions like this could be autogenerated
  "You have set `completion-ignored-extensions'."
  :variable completion-ignored-extensions)

(defachievement ""
  "You have changed mode-line-format")

(defachievement ""
  "You have set variables with customize.")

(defachievement ""
  "You have at least one custom theme.")

(defachievement ""
  "You have at least 10 custom themes.")

(defachievement "Bilingual"
  "You have at least 10 custom themes.")

(defachievement ""
  "Sentences end with 2 spaces.")

(defachievement ""
  "Sentences end with 1 space.")

(defachievement ""
  "You have customized faces.")

(defachievement ""
  "Turn off menus and scroll bars.")

"Keeping up with the Joneses" customize-changed

;;}}}
;;{{{ Version control

(defachievement "Old Timer"
  "Your .emacs has been under version control for over 5 years ago.")

;;}}}
;;{{{ Editing

;; unicode characters
;; used mark commands
;; use keyboard macros -- C-x C-k for all things related
;; name-last-kbd-macro
;; apply-macro-to-region-lines
;; use lisp in regular expression replacements
;; abbrev mode
;; use registers
;; scroll other window
;; follow mode
;; selective-dsplay C-u C-x $
;; file-sets
;; comment-dwim
;; comment-or-uncomment-region or comment-region
mark-defun
mark-whole-buffer
delete-indentation
visual-line-mode
flyspell speck wcheck-mode
clone-indirect-buffer
move-to-window-line
append-next-kill
scroll-all-mode
transpose commands -- and with a prefix arg of 0
(how-to "C-0 M-k -- kill to beginning of line")
align
align-regexp
fill-paragraph
two-column
C-q -- especially in search and replace

;;}}}
;;{{{ Searching and replacing

occur-edit-mode
ack-and-a-half
multi-occur
isearch-edit-string
(how-to "In incremental search mode:
Type M-c to toggle search case-sensitivity.
Type M-r to toggle regular-expression mode.
Type M-s w to toggle word mode.
Type M-e to edit the search string in the minibuffer.
Type M-s h r to highlight the search throughout the buffer")
find-grep-dired
wgrep
C-j -- to match a newline when searching

;;}}}
;;{{{ whitespace

(defachievement ""
  "You prefer spaces.")

(defachievement ""
  "You prefer tabs.")

(defachievement ""
  "You prefer mixing spaces and tabs.  What's wrong with you?")

(defachievement ""
  "You hate trailing whitespace.")      ;Call delete-trailing-whitespace 100 times

(defachievement "Unyielding"
  :command 'indent-rigidly)

whitespace-mode

;;}}}
;;{{{ misc.

(defachievement "Author")
(defachievement "Editor"
  (over 50% are self-insert))

array
autorevert
avoid
battery
bug-reference
compare-windows
diary-lib
describe-text-properties
describe-char
delsel
dbus
css-mode
cwarn
cua-mode
subword
speedbar
cedet
sql
imenu
ediff
ecb
doc-view
yasnippet/skeleton/etc.

type-break-mode
enriched-mode
command-history
view-lossage
flymake
proced
re-builder
count-lines-region
sort-lines
sort-columns
autocomplete
secrets
saveplace
desktop
rot13
repeat
remember
regex-opt

rcompile

line-spacing
normal-mode
;; python-wars locate-library
repeat-complex-command
bookmarks
file/directory local variables

;; Look for "favorite emacs features" articles

network-interface-info

(defachievement "A little help from my friends"
  "You are using the Emacs starter kit")

(defachievement ""
  "You use dired.")                     ;and wdired

locate


c-eldoc
ace-jump-mode
writegood-mode
writeroom-mode
drag-stuff
parenface
paredit
num3-mode
multiple-cursors
mark-multiple
keyfreq
hl-sexp
highlight-symbol

linum

undo-tree
emacs-lock
smex
emerge
follow
finder
ffap
face-remap
fortune
hexl-mode
gud
zencoding-mode.el


(defachievement "UTF-8 utf-8 UTF8 utf8")
(master  "")
(longlines  "")

backup-directory-alist
uniquify
transient-mark-mode
(line-number-mode 1)
(column-number-mode 1)

tramp
tar zip etc.

(defachievement ""
  "You are running an emacs server.")


;; http://stackoverflow.com/questions/154097/whats-in-your-emacs


;; Check that the file hasn't been tampered with by using a checksum
;; (which of course can be changed if they know how).

;; Editing video
;; Emacsspeak
;; Using gnus or other mail reader
;; Ability to opt out of one, e.g. I'll never use viper-mode

;; How about polyglot for using many different major-modes. And an
;; achievement for having a big .emacs. Or rather an achievement for
;; every power of ten lines: 10, 100, 1000, 10000, etc. Using M-x
;; butterfly, the psychologist, all the games, redifing too many
;; keys... Using sexp keys a lot, having a long uptime, using vc-mode,
;; having lots of custom-themes... The possibilities are endless. Heck
;; there could even be one for modifying the source of the
;; achievements.el.

;; I just got the Mentally Unstable Emacs Badge for using M-x doctor
;; 113 times in a week!!!! I'm SO proud!


;; a function in post-command-hook (or just look at keyboard event, I
;; think that is possible somehow) that looks for commands/combos the
;; user uses, could trigger achievements for using stuff like M-x,
;; eval-expression, prefix args or certain patterns like switching
;; buffers often without editing, trying to save twice

;; in kill-emacs-hook could for triggering achievements at the end of
;; the session, for example the time the user spent in emacs, how many
;; loc he produced throughout the session, how many different files he
;; edited

;; compilation-finish-function could be used to trigger achievements
;; like compiling something without errors on the first try, maybe
;; achievements for certain kinds of simple errors (something like no
;; main method or a segfault when running, easy to detect stuff)

;; after-buffer-change and before-buffer-change could be used to keep
;; track of editing to trigger achievements when the user indents
;; regions, starts using comment-or-uncomment-line on regions, writing
;; out lots of loc without saving

;; after-save-hook for achievements like the number of concurrent
;; buffers a user has open, how many modified, using indirect buffers

;; change-major-mode to trigger achievements when the user starts
;; using certain major-modes, maybe check existence of symbols to
;; check if the user uses stuff that is not part of emacs like other
;; modes for programming languages (js2-mode for example), org-mode
;; (which is now part of emacs I believe), etc

;; I am pretty sure there is more one could come up with. You might be
;; tempted to use defadvice instead of all those hooks, but I would
;; strongly suggest not to, defadvice is made of pure evil and I would
;; try to stay away from it as far as possible.

;; I gave a few brief examples of what I think could be triggers for
;; achievements but that is not enough when designing
;; achievements. The final achievements should be helpful and
;; encouraging in the beginning for new users and later interesting
;; for advanced users.

;; To give a short example what I mean: an early achievement could be
;; just switching between buffers, that could encourage someone new to
;; start using more buffers, and help him learn about managing
;; them. Later an advanced user using lots of buffers using ibuffer
;; but without an ibuffer-saved-filter-groups variable would probably
;; find an achievement interesting that taught him about ibuffers
;; grouping feature.

;; I think achievements should be seen and designed as part of emacs
;; help system, for them to make sense they should be some kind of
;; naturally developing guide through emacs and therefore strongly
;; rely on the already existing help system.

;; Also there needs to be a way to make them visible to the user when
;; he gets them in form of notifications (maybe use libnotify?), and
;; also important, the user has to see 'what is going to come up
;; next'. He needs that so he can choose what the next achievement is
;; going to be that he wants to achieve, therefore giving feedback to
;; the help system what he wants to learn.

;; AUCTeX, a suite of extensions that facilitate the creation of TeX and LaTeX documents
;; Calc, a powerful RPN numerical calculator
;; Calendar-mode, for keeping appointment calendars and diaries
;; Dissociated Press, a Racter-like text generator.
;; Dunnet, a text adventure
;; Ediff and Emerge, for comparing and combining files interactively.
;; Emacs/W3, a web browser
;; ERC and rcirc, IRC clients (22.1)[30]
;; Gnus, a full-featured newsreader and email client (and early evidence for Zawinski's Law, along with Rmail)
;; MULE, MultiLingual extensions to Emacs, allowing editing text written in multiple languages, somewhat analogous to Unicode
;; Org-mode for keeping notes, maintaining lists (to-do lists and other types of lists) and doing project planning and measuring
;; Info, an online help-browser
;; Planner, a personal information manager
;; SES, a spreadsheet
;; VM (View Mail), another full-featured email client
;; Wanderlust, a versatile email and news client

;;}}}
